---
- name: Updates
  ansible.builtin.apt:
    update_cache: true

- name: Reboot
  ansible.builtin.reboot:

- name: Disable SWAP
  ansible.builtin.shell: |
    swapoff -a
- name: Disable SWAP in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: ^([^#].*?\sswap\s+sw\s+.*)$
    replace: "# \\1"

- name: Create an empty file for the containerd module
  ansible.builtin.copy:
    content: ""
    dest: /etc/modules-load.d/containerd.conf
    force: false
    mode: "0644"

- name: Configure modules for containerd
  ansible.builtin.blockinfile:
    path: /etc/modules-load.d/containerd.conf
    block: |
      overlay
      br_netfilter

- name: Create an empty file for K8s sysctl parameters
  ansible.builtin.copy:
    content: ""
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    force: false
    mode: "0644"

- name: Configure sysctl parameters for K8S
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    line: "{{ item }}"
  with_items:
    - net.bridge.bridge-nf-call-iptables  = 1
    - net.ipv4.ip_forward                 = 1
    - net.bridge.bridge-nf-call-ip6tables = 1

- name: Apply sysctl parameters
  ansible.builtin.command: sysctl --system

- name: Install APT Transport HTTPS
  ansible.builtin.apt:
    name: apt-transport-https
    state: present

- name: Ensure /etc/apt/keyrings directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: a+r

- name: Add Docker apt-key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: a+r
    force: true

- name: Add Docker's APT repo
  ansible.builtin.apt_repository:
    repo: |
      deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} \
      signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      {{ ansible_distribution_release }} stable
    state: present
    filename: docker
    update_cache: true

- name: Add Kubernetes apt-key
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: a+r
    force: true

- name: Add Kubernetes APT repository
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /
    state: present
    update_cache: true

- name: Install containerd
  ansible.builtin.apt:
    name: containerd.io
    state: present

- name: Create containerd directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: "0644"

- name: Add containerd configuration
  ansible.builtin.shell: /usr/bin/containerd config default > /etc/containerd/config.toml
- name: Configuring Systemd cgroup driver for containerd
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: "            SystemdCgroup = false"
    line: "            SystemdCgroup = true"

- name: Enable the containerd service and start service
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    enabled: true
    daemon-reload: true

- name: Install Kubernetes binaries
  ansible.builtin.apt:
    name: "{{ packages }}"
    state: present
    update_cache: true
  vars:
    packages:
      # it is usually recommended to specify which version you want to install
      - kubelet=1.30.*
      - kubeadm=1.30.*
      - kubectl=1.30.*

- name: Enable the Kubelet service
  ansible.builtin.service:
    name: kubelet
    enabled: true

- name: Load modules
  ansible.builtin.shell: |
    sudo modprobe overlay
    sudo modprobe br_netfilter

- name: Set bridge-nf-call-iptables
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1

- name: Set ip_forward
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: 1

- name: Reboot
  ansible.builtin.reboot:
